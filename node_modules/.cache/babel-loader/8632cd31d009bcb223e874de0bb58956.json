{"ast":null,"code":"import _defineProperty from \"/Users/ocean/Documents/KTH/XJobb/Haxonomy Web App/haxonomy-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/ocean/Documents/KTH/XJobb/Haxonomy Web App/haxonomy-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/ocean/Documents/KTH/XJobb/Haxonomy Web App/haxonomy-frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/ocean/Documents/KTH/XJobb/Haxonomy Web App/haxonomy-frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/Users/ocean/Documents/KTH/XJobb/Haxonomy Web App/haxonomy-frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/ocean/Documents/KTH/XJobb/Haxonomy Web App/haxonomy-frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/ocean/Documents/KTH/XJobb/Haxonomy Web App/haxonomy-frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/ocean/Documents/KTH/XJobb/Haxonomy Web App/haxonomy-frontend/src/components/IndexReport.js\";\nimport React, { Component } from \"react\";\nimport { server } from '../config';\nimport { withRouter } from 'react-router-dom';\nimport AddTerm from \"./AddTerm\";\n/**\n * Presents the user with input fields for registration of new user. Given values are posted to the server using fetch.\n */\n\nvar IndexReport =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(IndexReport, _Component);\n\n  _createClass(IndexReport, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {}\n  }]);\n\n  function IndexReport(props) {\n    var _this;\n\n    _classCallCheck(this, IndexReport);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(IndexReport).call(this, props));\n    _this.state = {\n      URL: \"\",\n      password: \"\",\n      URLError: \"\",\n      passwordError: \"\",\n      genericErrorMessage: \"*required\",\n      reportTitle: \"\"\n    };\n    _this.handleInputChange = _this.handleInputChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.errors = _this.errors.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.fetchReport = _this.fetchReport.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.processReport = _this.processReport.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(IndexReport, [{\n    key: \"handleInputChange\",\n    value: function handleInputChange(event) {\n      var _this$setState;\n\n      var target = event.target;\n      var value = target.value;\n      var name = target.name;\n      this.setState((_this$setState = {}, _defineProperty(_this$setState, name, value), _defineProperty(_this$setState, name + \"Error\", null), _this$setState));\n    }\n  }, {\n    key: \"processReport\",\n    value: function processReport(event) {\n      this.fetchReport(event.target.value);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"form\", {\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, \"Report URL:\", React.createElement(\"input\", {\n        name: \"URL\",\n        type: \"URL\",\n        value: this.state.URL,\n        onChange: function onChange() {\n          _this2.handleInputChange();\n\n          _this2.processReport();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }), !!this.state.URLError && React.createElement(\"p\", {\n        style: {\n          color: 'red',\n          float: \"right\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, this.state.URLError)), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, \"Password:\", React.createElement(\"input\", {\n        name: \"password\",\n        type: \"password\",\n        value: this.state.password,\n        onChange: this.handleInputChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }), !!this.state.passwordError && React.createElement(\"p\", {\n        style: {\n          color: 'red',\n          float: \"right\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, this.state.passwordError)), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"submit\",\n        value: \"Submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }));\n    }\n    /**\n     * Checks if any of the input fields are empty and in that case sets the corresponding error state variable to an\n     * error message.\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"errors\",\n    value: function errors() {\n      var _this3 = this;\n\n      var error = false;\n\n      if (this.state.email === null || this.state.email === \"\") {\n        this.setState(function () {\n          return {\n            emailError: _this3.state.genericErrorMessage\n          };\n        });\n        error = true;\n      }\n\n      if (this.state.password === null || this.state.password === \"\") {\n        this.setState(function () {\n          return {\n            passwordError: _this3.state.genericErrorMessage\n          };\n        });\n        error = true;\n      }\n\n      return error;\n    }\n  }, {\n    key: \"fetchReport\",\n    value: function fetchReport(URL) {\n      var _this4 = this;\n\n      fetch(URL).then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        return _this4.setState({\n          reportTitle: data,\n          URL: URL\n        }, console.log(data));\n      });\n    }\n    /**\n     * Checks for errors and then post form to server. Redirects to login page on success, displays error message on failure.\n     * @param event\n     */\n\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit(event) {\n      var _this5 = this;\n\n      event.preventDefault();\n      if (this.errors()) return;\n      var jsonRequest = {\n        \"password\": this.state.password,\n        \"email\": this.state.email\n      };\n      fetch(server + '/registration', {\n        credentials: 'include',\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(jsonRequest)\n      }).then(function (response) {\n        return response.json();\n      }).then(function (response) {\n        console.log(response);\n\n        if (response.error && response.status === 409) {\n          throw new Error(\"The username already exists, please try another.\");\n        }\n\n        if (response.error) throw new Error(\"Something went wrong, please try again in a few minutes\");else return response;\n      }).then(function (data) {\n        alert(\"User created\");\n\n        _this5.props.history.replace('/login');\n      }).catch(function (e) {\n        alert(e.message);\n      });\n    }\n  }]);\n\n  return IndexReport;\n}(Component);\n\nexport default withRouter(IndexReport);","map":{"version":3,"sources":["/Users/ocean/Documents/KTH/XJobb/Haxonomy Web App/haxonomy-frontend/src/components/IndexReport.js"],"names":["React","Component","server","withRouter","AddTerm","IndexReport","props","state","URL","password","URLError","passwordError","genericErrorMessage","reportTitle","handleInputChange","bind","handleSubmit","errors","fetchReport","processReport","event","target","value","name","setState","color","float","error","email","emailError","fetch","then","response","json","data","console","log","preventDefault","jsonRequest","credentials","method","headers","body","JSON","stringify","status","Error","alert","history","replace","catch","e","message"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport {server} from '../config';\nimport { withRouter } from 'react-router-dom'\nimport AddTerm from \"./AddTerm\";\n\n/**\n * Presents the user with input fields for registration of new user. Given values are posted to the server using fetch.\n */\nclass IndexReport extends Component{\n\n    componentDidUpdate(){\n\n    }\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            URL: \"\",\n            password: \"\",\n            URLError: \"\",\n            passwordError: \"\",\n            genericErrorMessage: \"*required\",\n            reportTitle: \"\",\n\n        }\n\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.errors = this.errors.bind(this);\n        this.fetchReport = this.fetchReport.bind(this);\n        this.processReport = this.processReport.bind(this);\n    }\n\n    handleInputChange(event) {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n\n        this.setState({\n            [name]: value,\n            [name + \"Error\"]: null,\n        });\n    }\n\n    processReport(event){\n\n        this.fetchReport(event.target.value);\n    }\n\n    render(){\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <label>\n                    Report URL:\n                    <input\n                        name=\"URL\"\n                        type=\"URL\"\n                        value={this.state.URL}\n                        onChange={()=>{this.handleInputChange(); this.processReport();}} />\n                    {!!this.state.URLError && (<p style={{color: 'red', float: \"right\"}}>{this.state.URLError}</p>)}\n                </label>\n                <p></p>\n                <br />\n                <label>\n                    Password:\n                    <input\n                        name=\"password\"\n                        type=\"password\"\n                        value={this.state.password}\n                        onChange={this.handleInputChange} />\n                    {!!this.state.passwordError && (<p style={{color: 'red', float: \"right\"}}>{this.state.passwordError}</p>)}\n                </label>\n                <br/>\n                <input type=\"submit\" value=\"Submit\" />\n            </form>\n        )\n    }\n\n    /**\n     * Checks if any of the input fields are empty and in that case sets the corresponding error state variable to an\n     * error message.\n     * @returns {boolean}\n     */\n    errors(){\n        let error = false;\n        if (this.state.email === null || this.state.email === \"\") {\n            this.setState(() => ({ emailError: this.state.genericErrorMessage}));\n            error = true;\n        }\n        if (this.state.password === null || this.state.password === \"\") {\n            this.setState(() => ({ passwordError: this.state.genericErrorMessage}));\n            error = true;\n        }\n        return error;\n\n    }\n\n    fetchReport(URL){\n        fetch(URL)\n            .then(response => response.json())\n            .then(data => this.setState({ reportTitle: data, URL: URL }, console.log(data)));\n    }\n\n    /**\n     * Checks for errors and then post form to server. Redirects to login page on success, displays error message on failure.\n     * @param event\n     */\n    handleSubmit(event) {\n        event.preventDefault();\n        if(this.errors())\n            return;\n        const jsonRequest =\n            {\n                \"password\": this.state.password,\n                \"email\": this.state.email,\n            }\n        fetch(server + '/registration', {\n            credentials: 'include',\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(jsonRequest),\n        }).then((response) => {\n            return response.json();\n        }).then((response) => {\n            console.log(response)\n            if ((response.error) && response.status === 409) {throw new Error(\"The username already exists, please try another.\")}\n            if(response.error) throw new Error(\"Something went wrong, please try again in a few minutes\");\n            else return response;\n        }).then((data) => {\n                alert(\"User created\");\n            this.props.history.replace('/login');\n            })\n            .catch((e) => {\n                alert(e.message);\n            });\n    }\n}\n\nexport default  withRouter(IndexReport);"]},"metadata":{},"sourceType":"module"}
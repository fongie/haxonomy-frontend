{"ast":null,"code":"import _objectWithoutProperties from \"/Users/ocean/Documents/KTH/XJobb/Haxonomy Web App/haxonomy-frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/ocean/Documents/KTH/XJobb/Haxonomy Web App/haxonomy-frontend/src/components/Auth.js\";\nimport React from \"react\";\nimport { BrowserRouter as Router, Route, Redirect } from \"react-router-dom\";\nimport Login from '../pages/Login';\nimport Register from '../pages/Register';\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport Home from '../pages/Home';\nimport Haxonomy from './Haxonomy';\nimport Administrate from \"./Administrate\";\n/**\n * This is where the \"Router\" which handles navigation is implemented and all the paths initiated.\n * A header and a footer is always present. Anyone can access route but when a user tries to access a private route page\n * they should be redirected to login.\n * @returns {*}\n * @constructor\n */\n\nfunction Auth() {\n  return React.createElement(Router, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, React.createElement(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }), React.createElement(Route, {\n    path: \"/home\",\n    component: Home,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }), React.createElement(Route, {\n    path: \"/register\",\n    component: Register,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }), React.createElement(Route, {\n    path: \"/login\",\n    component: Login,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }), React.createElement(Route, {\n    path: \"/administrate\",\n    component: Administrate,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }), React.createElement(Route, {\n    path: \"/haxonomy\",\n    component: Haxonomy,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }), React.createElement(Footer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  })));\n}\n/**\n * Set authenticated to true or false. Stores currently logged in username.\n *\n * @type {{user: string, isAuthenticated: boolean, authenticate(*=): void, signout(*=): void, getItems(*)}}\n */\n\n\nexport var auth = {\n  user: \"\",\n  isAuthenticated: false,\n  authenticate: function authenticate(cb) {\n    this.isAuthenticated = true;\n    cb();\n  },\n  signout: function signout(cb) {\n    this.user = \"\";\n    this.isAuthenticated = false;\n    cb();\n  },\n  getItems: function getItems(cb) {}\n};\n/**\n * Create a PrivateRoute with same API as Route\n * Render a Route and pass all props to it\n * Render component prop if user is authenticated, otherwise redirects\n * @param Component\n * @param rest\n * @constructor\n */\n\nvar PrivateRoute = function PrivateRoute(_ref) {\n  var Component = _ref.component,\n      rest = _objectWithoutProperties(_ref, [\"component\"]);\n\n  return React.createElement(Route, Object.assign({}, rest, {\n    render: function render(props) {\n      return auth.isAuthenticated ? React.createElement(Component, Object.assign({}, props, {\n        auth: auth.isAuthenticated,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      })) : //TODO should check something else than auth={auth.isAuthenticated} ?\n      React.createElement(Redirect, {\n        to: {\n          pathname: '/login',\n          state: {\n            from: props.location\n            /* save a state key, so that we can redirect the user back to where they were before login */\n\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }));\n};\n\nexport default Auth;","map":{"version":3,"sources":["/Users/ocean/Documents/KTH/XJobb/Haxonomy Web App/haxonomy-frontend/src/components/Auth.js"],"names":["React","BrowserRouter","Router","Route","Redirect","Login","Register","Header","Footer","Home","Haxonomy","Administrate","Auth","auth","user","isAuthenticated","authenticate","cb","signout","getItems","PrivateRoute","Component","component","rest","props","pathname","state","from","location"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACIC,aAAa,IAAIC,MADrB,EAEIC,KAFJ,EAGIC,QAHJ,QAIO,kBAJP;AAKA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAOC,QAAP,MAAqB,mBAArB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,IAAP,MAAiB,eAAjB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AAGA;;;;;;;;AAOA,SAASC,IAAT,GAAgB;AACZ,SACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,OAAZ;AAAoB,IAAA,SAAS,EAAEH,IAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAGI,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,WAAZ;AAAwB,IAAA,SAAS,EAAEH,QAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,EAII,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,QAAZ;AAAqB,IAAA,SAAS,EAAED,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,EAKI,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,eAAZ;AAA4B,IAAA,SAAS,EAAEM,YAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALJ,EAMI,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,WAAZ;AAAwB,IAAA,SAAS,EAAED,QAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANJ,EAOI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPJ,CADJ,CADJ;AAaH;AAED;;;;;;;AAKA,OAAO,IAAMG,IAAI,GAAG;AAChBC,EAAAA,IAAI,EAAE,EADU;AAEhBC,EAAAA,eAAe,EAAE,KAFD;AAGhBC,EAAAA,YAHgB,wBAGHC,EAHG,EAGC;AACb,SAAKF,eAAL,GAAuB,IAAvB;AACAE,IAAAA,EAAE;AACL,GANe;AAOhBC,EAAAA,OAPgB,mBAORD,EAPQ,EAOJ;AACR,SAAKH,IAAL,GAAY,EAAZ;AACA,SAAKC,eAAL,GAAuB,KAAvB;AACAE,IAAAA,EAAE;AACL,GAXe;AAYhBE,EAAAA,QAZgB,oBAYPF,EAZO,EAYH,CAEZ;AAde,CAAb;AAiBP;;;;;;;;;AAQA,IAAMG,YAAY,GAAG,SAAfA,YAAe;AAAA,MAAcC,SAAd,QAAGC,SAAH;AAAA,MAA4BC,IAA5B;;AAAA,SACjB,oBAAC,KAAD,oBAAWA,IAAX;AAAiB,IAAA,MAAM,EAAE,gBAACC,KAAD;AAAA,aACrBX,IAAI,CAACE,eAAL,GACQ,oBAAC,SAAD,oBAAeS,KAAf;AAAsB,QAAA,IAAI,EAAEX,IAAI,CAACE,eAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADR,GAC8D;AACtD,0BAAC,QAAD;AAAU,QAAA,EAAE,EAAE;AACdU,UAAAA,QAAQ,EAAE,QADI;AAEdC,UAAAA,KAAK,EAAE;AAAEC,YAAAA,IAAI,EAAEH,KAAK,CAACI;AAAW;;AAAzB;AAFO,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHa;AAAA,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADiB;AAAA,CAArB;;AAWA,eAAehB,IAAf","sourcesContent":["import React from \"react\";\nimport {\n    BrowserRouter as Router,\n    Route,\n    Redirect,\n} from \"react-router-dom\";\nimport Login from '../pages/Login';\nimport Register from '../pages/Register';\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport Home from '../pages/Home';\nimport Haxonomy from './Haxonomy';\nimport Administrate from \"./Administrate\";\n\n\n/**\n * This is where the \"Router\" which handles navigation is implemented and all the paths initiated.\n * A header and a footer is always present. Anyone can access route but when a user tries to access a private route page\n * they should be redirected to login.\n * @returns {*}\n * @constructor\n */\nfunction Auth() {\n    return (\n        <Router>\n            <div>\n                <Header />\n                <Route path=\"/home\" component={Home}/>\n                <Route path=\"/register\" component={Register}/>\n                <Route path=\"/login\" component={Login}/>\n                <Route path=\"/administrate\" component={Administrate}/>\n                <Route path=\"/haxonomy\" component={Haxonomy}/>\n                <Footer/>\n            </div>\n        </Router>\n    )\n}\n\n/**\n * Set authenticated to true or false. Stores currently logged in username.\n *\n * @type {{user: string, isAuthenticated: boolean, authenticate(*=): void, signout(*=): void, getItems(*)}}\n */\nexport const auth = {\n    user: \"\",\n    isAuthenticated: false,\n    authenticate(cb) {\n        this.isAuthenticated = true;\n        cb();\n    },\n    signout(cb) {\n        this.user = \"\"\n        this.isAuthenticated = false\n        cb();\n    },\n    getItems(cb) {\n\n    }\n}\n\n/**\n * Create a PrivateRoute with same API as Route\n * Render a Route and pass all props to it\n * Render component prop if user is authenticated, otherwise redirects\n * @param Component\n * @param rest\n * @constructor\n */\nconst PrivateRoute = ({ component: Component, ...rest }) => (\n    <Route {...rest} render={(props) => (\n        auth.isAuthenticated\n            ? ( <Component {...props} auth={auth.isAuthenticated}/> ) //TODO should check something else than auth={auth.isAuthenticated} ?\n            : ( <Redirect to={{\n                pathname: '/login',\n                state: { from: props.location } /* save a state key, so that we can redirect the user back to where they were before login */\n            }} /> )\n    )} />\n)\n\nexport default Auth;"]},"metadata":{},"sourceType":"module"}